x-common: &common
  networks:
    - trifecta-bridge
  restart: always

services:



#sue this export EXTERNAL_IP=$(hostname -I | awk '{print $1}')

#----------- Main Services -----------#
  messaging-kafka:
    <<: *common
    image: confluentinc/cp-kafka:latest
    hostname: messaging-kafka
    container_name: messaging-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://messaging-kafka:9092,PLAINTEXT_HOST://${EXTERNAL_IP}:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@messaging-kafka:29093"
      KAFKA_LISTENERS: "PLAINTEXT://messaging-kafka:9092,CONTROLLER://messaging-kafka:29093,PLAINTEXT_HOST://0.0.0.0:9093"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_LOG4J_LOGGERS: "org.apache.kafka.image.loader.MetadataLoader=WARN"
    volumes:
      - kafka-data:/var/lib/kafka/data:rw
    # profiles:
    #   - donotstart



  postgresql:
    <<: *common
    container_name: db-postgres
    image: bitnami/postgresql:latest
    volumes:
      - "postgresql_data:/bitnami/postgresql"
      - ./conf/postgres/init.sh:/docker-entrypoint-initdb.d/init-database.sh
    ports:
      - "5432:5432"
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_POSTGRES_PASSWORD=bitnami
      # - POSTGRESQL_DATABASE=device_registry
      # - POSTGRESQL_USERNAME=pgdevregsvc
      # - POSTGRESQL_PASSWORD=pgdevregpass
    profiles:
     - donotstart



  messaging-mqtt:
    <<: *common
    image: emqx/emqx:latest-elixir
    container_name: messaging-mqtt
    volumes:
      - /home/zebra/Github/certs_48.178:/opt/emqx/etc/certs/
      - ./conf/emqx/emqx.conf:/opt/emqx/etc/emqx.conf
    ports:
      #- 8080:8080
      - 8083:8083
      - 18083:18083
      - 1883:1883
      - 8081:8081
      - 8883:8883
      - 8084:8084
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    # profiles:
    #   - donotstart


  db-mongo:
    <<: *common
    image: bitnami/mongodb:latest
    container_name: db-mongo
    volumes:
      - mongo-db:/bitnami/mongodb
    ports:
      - 27017:27017
    # profiles:
    #  - donotstart




  webhook:
    image: "webhooksite/webhook.site"
    # Enable build for development:
    # build:
    #   dockerfile: Dockerfile
    #   context: ./
    command: php artisan queue:work --daemon --tries=3 --timeout=10
    ports:
      - "8085:80"
    environment:
      - APP_ENV=dev
      - APP_DEBUG=true
      - APP_URL=http://localhost:8085
      - APP_LOG=errorlog
      - DB_CONNECTION=sqlite
      - REDIS_HOST=redis
      - BROADCAST_DRIVER=redis
      - CACHE_DRIVER=redis
      - QUEUE_DRIVER=redis
      - ECHO_HOST_MODE=path
    depends_on:
      - redis
    # profiles:
    #   - donotstart



  redis:
    image: "redis:alpine"
    # profiles:
    #   - donotstart


  laravel-echo-server:
    image: "webhooksite/laravel-echo-server"
    environment:
      - LARAVEL_ECHO_SERVER_AUTH_HOST=http://webhook
      - LARAVEL_ECHO_SERVER_HOST=0.0.0.0
      - LARAVEL_ECHO_SERVER_PORT=6001
      - ECHO_REDIS_PORT=6379
      - ECHO_REDIS_HOSTNAME=redis
      - ECHO_PROTOCOL=http
      - ECHO_ALLOW_CORS=true
      - ECHO_ALLOW_ORIGIN=*
      - ECHO_ALLOW_METHODS=*
      - ECHO_ALLOW_HEADERS=*
    # profiles:
    #   - donotstart


  nginx_orig:
    <<: *common
    container_name: web-nginx
    image: bitnami/nginx
    ports:
      - 443:8443
    volumes:
    #  - nginx-files:/app/files
      - ./conf/nginx_orig/certs:/opt/bitnami/nginx/certs
      # - ./conf/nginx/files:/app/files
    #   - C:\Users\cptma\Documents\Github\trifecta-devicereg\files:/app/files
    #   - ./conf/nginx/ftp:/app/ftp/
    #   - ./conf/nginx/index.html:/app/index.html
      - ./conf/nginx_orig/my_server_block.conf:/opt/bitnami/nginx/conf/server_blocks/my_server_block.conf
    #  - ./config/my_server_block.conf :/opt/bitnami/nginx/conf/server_blocks/my_server_block.conf
    # profiles:
    #   - donotstart

#----------- GUI Tools -----------#



  pgadmin4:
    <<: *common
    container_name: pgadmin4
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin_data:/var/lib/pgadmin:rw
      - ./conf/pgadmin/servers.json:/pgadmin4/servers.json
      - ./conf/pgadmin/pgpass:/pgadmin4/pgpass
    ports:
      - "85:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    profiles:
     - donotstart



  kafka-ui:
    <<: *common
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    volumes:
      - ./conf/proto:/protofiles
    networks:
      - trifecta-bridge
    ports:
      - "9099:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=messaging-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=messaging-kafka:9092
      - kafka.clusters.0.serde.0.name=ProtobufFile
      - kafka.clusters.0.serde.0.properties.protobufFilesDir=/protofiles/
      - kafka.clusters.0.serde.0.topicKeysPattern=site-publish
      - kafka.clusters.0.serde.0.topicValuesPattern=site-publish
      - kafka.clusters.0.serde.0.properties.protobufMessageNameByTopic.site-publish=SiteNotification
    depends_on:
      - messaging-kafka
    # profiles:
    #  - donotstart





#----------- Metrics -----------#


  grafana:
    <<: *common
    container_name: grafana
    image: docker.io/bitnami/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=bitnami"
    volumes:
      - grafana_data:/opt/bitnami/grafana/data
    profiles:
      - donotstart


      
  prometheus:
    <<: *common
    container_name: prometheus
    image: docker.io/bitnami/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./conf/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
      - prom_data:/opt/bitnami/prometheus/data
    profiles:
      - donotstart


  postgres-exporter:
    <<: *common
    container_name: postgres-exporter
    image: bitnami/postgres-exporter
    environment:
      DATA_SOURCE_NAME: 'postgresql://postgres:bitnami@db-postgres:5432/postgres?sslmode=disable'
    ports:
      - '9187:9187'
    profiles:
      - donotstart


  kafka-exporter:
    <<: *common
    container_name: kafka-exporter
    image: bitnami/kafka-exporter
    command: '--kafka.server=messaging-kafka:9092'
    ports:
      - '9308:9308'
    profiles:
      - donotstart



  spring-boot-admin:
    <<: *common
    image: spring-admin
    container_name: spring-boot-admin
    ports:
      - 8087:8087
    environment:
      - server.port=8087
    profiles:
      - donotstart





#----------- Sonar -----------#



  sonarqube_orig:
    <<: *common
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - postgresql
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db-postgres:5432/sonar_db?currentSchema=sonar_schema
      SONAR_JDBC_USERNAME: sonaruser
      SONAR_JDBC_PASSWORD: sonarpass
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    profiles:
      - donotstart



  sonarqube:
    <<: *common
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - postgresql
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db-postgres:5432/sonar_db?currentSchema=sonar_schema
      SONAR_JDBC_USERNAME: sonaruser
      SONAR_JDBC_PASSWORD: sonarpass
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    profiles:
      - donotstart




#----------- Spring apps -----------#




  trifecta-device-registry:
    <<: *common
    image: dev
    container_name: trifecta-device-registry
    ports:
      - 8085:8085
    volumes:
      #- ./files:/home/trif-user/files
      - nginx-files:/home/trif-user/files
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=messaging-kafka:9092
      - MQTT_ADDRESS=messaging-mqtt:8083
      - SPRING_DATA_MONGODB_HOST=db-mongo
      - EXTERNAL_URL=http://localhost
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-postgres:5432/device_registry
      - SPRING_DATASOURCE_USERNAME=pgdevregsvc
      - SPRING_DATASOURCE_PASSWORD=pgdevregpass
    depends_on:
      - messaging-kafka
    profiles:
      - donotstart



  trifecta-license-service:
    <<: *common
    image: license
    container_name: trifecta-license-service
    ports:
      - 8085:8085
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=messaging-kafka:9092
      - SPRING_DATA_MONGODB_HOST=db-mongo
      - EXTERNAL_URL=http://localhost
      - hostId=17ec7230d096c13112fcb5866259d160
      - hostName=LAPTOP-4OVO3VIG
      - clsId=
    depends_on:
      - messaging-kafka
    profiles:
      - donotstart


  trifecta-message-bridge:
    <<: *common
    image: message-bridge
    container_name: trifecta-messagebridge
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=messaging-kafka:9092
      - KAFKA_BOOTSTRAPADDRESS=messaging-kafka:9092
      - MQTT_ADDRESS=messaging-mqtt:8083
    depends_on:
      - messaging-kafka
      - messaging-mqtt
    profiles:
      - donotstart


      
  nginx:
    <<: *common
    container_name: web-nginx
    image: trif-nginx
    ports:
      - 80:8080
    volumes:
      # - nginx-files:/app/files
      - ./conf/nginx/certs:/opt/bitnami/nginx/certs
      #  - ./conf/nginx/files:/app/files
      #- C:\Users\cptma\Documents\Github\trifecta-devicereg\files:/app/files
      - ./conf/nginx/ftp:/app/ftp/
      - ./conf/nginx/index.html:/app/index.html
      - ./conf/nginx/my_server_block.conf:/opt/bitnami/nginx/conf/server_blocks/my_server_block.conf
    #  - ./config/my_server_block.conf :/opt/bitnami/nginx/conf/server_blocks/my_server_block.conf
    profiles:
      - donotstart



volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  mongo-db:
    driver: local
  zookeeper-logs:
    driver: local
  nginx-files:
    driver: local
  postgresql_data:
    driver: local
  pgadmin_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  grafana_data:
    driver: local
  prom_data:
    driver: local



networks:
  trifecta-bridge:
    driver: bridge
